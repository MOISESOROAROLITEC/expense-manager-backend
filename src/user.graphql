scalar Date
scalar Upload

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  birthDay: Date!
  image: String
  token: String
  createAt: Date!
}

type Account{
  id: ID!
  amount: Int!
  target: Int!
  createAt: Date!
}

type Transaction{
  id: ID!
  type: String!
  amount: Int!
  createAt: Date!
}

input InputImage{
  fileName: String!
  fileData: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  birthDay: String!
  image: Upload
}

input LoginUserInput {
  email: String!
  password: String!
}


type UploadImageResponse{
  status: Boolean!
}

type LoginResponse {
  id: ID!
  name: String!
  email: String!
  password: String!
  birthDay: Date!
  createAt: Date!
  token:String!
}

type Query {
  users: [User!]!
  getUserByToken(token: String): User!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  loginUser(loginUserInput: LoginUserInput!): User!
  # uploadUserImage(uploadUserImageInput: UploadImageInput):UploadImageResponse!
}
